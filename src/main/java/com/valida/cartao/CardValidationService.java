package com.valida.cartao;

/**
 * Servi√ßo respons√°vel pela valida√ß√£o e identifica√ß√£o de cart√µes de cr√©dito.
 * 
 * Esta classe centraliza a l√≥gica de neg√≥cio relacionada √† valida√ß√£o
 * e identifica√ß√£o de bandeiras de cart√£o de cr√©dito.
 */
public class CardValidationService {
    
    /**
     * Resultado da valida√ß√£o e identifica√ß√£o de um cart√£o.
     */
    public static class ValidationResult {
        private final boolean isValid;
        private final CardBrandIdentifier.CardBrand brand;
        private final String message;
        private final String formattedNumber;
        
        public ValidationResult(boolean isValid, CardBrandIdentifier.CardBrand brand, 
                              String message, String formattedNumber) {
            this.isValid = isValid;
            this.brand = brand;
            this.message = message;
            this.formattedNumber = formattedNumber;
        }
        
        public boolean isValid() { return isValid; }
        public CardBrandIdentifier.CardBrand getBrand() { return brand; }
        public String getMessage() { return message; }
        public String getFormattedNumber() { return formattedNumber; }
    }
    
    /**
     * Valida e identifica a bandeira de um cart√£o de cr√©dito.
     * 
     * @param input a entrada do usu√°rio contendo o n√∫mero do cart√£o
     * @return resultado da valida√ß√£o contendo informa√ß√µes sobre o cart√£o
     */
    public ValidationResult validateAndIdentify(String input) {
        // Verificar entrada vazia
        if (input == null || input.trim().isEmpty()) {
            return new ValidationResult(false, CardBrandIdentifier.CardBrand.UNKNOWN,
                "‚ùå Entrada inv√°lida: Por favor, digite um n√∫mero de cart√£o.", "");
        }
        
        // Sanitizar entrada
        String sanitized = input.replaceAll("\\D", "");
        
        // Verificar se sobrou algum d√≠gito ap√≥s sanitiza√ß√£o
        if (sanitized.isEmpty()) {
            return new ValidationResult(false, CardBrandIdentifier.CardBrand.UNKNOWN,
                "‚ùå Entrada inv√°lida: N√£o foram encontrados n√∫meros na entrada '" + input + "'", "");
        }
        
        // Verificar comprimento
        if (sanitized.length() < 8) {
            return new ValidationResult(false, CardBrandIdentifier.CardBrand.UNKNOWN,
                "‚ùå N√∫mero muito curto: " + sanitized.length() + " d√≠gitos. Cart√µes v√°lidos t√™m entre 8 e 19 d√≠gitos.", "");
        }
        
        if (sanitized.length() > 19) {
            return new ValidationResult(false, CardBrandIdentifier.CardBrand.UNKNOWN,
                "‚ùå N√∫mero muito longo: " + sanitized.length() + " d√≠gitos. Cart√µes v√°lidos t√™m entre 8 e 19 d√≠gitos.", "");
        }
        
        // Verificar se cont√©m apenas zeros
        if (sanitized.matches("^0+$")) {
            return new ValidationResult(false, CardBrandIdentifier.CardBrand.UNKNOWN,
                "‚ùå N√∫mero inv√°lido: N√£o pode conter apenas zeros.", "");
        }
        
        // Identificar bandeira
        CardBrandIdentifier.CardBrand brand = CardBrandIdentifier.identify(sanitized);
        String formattedNumber = formatCardNumber(sanitized);
        
        // Verificar algoritmo de Luhn
        boolean isLuhnValid = CardBrandIdentifier.isValidLuhn(sanitized);
        String luhnStatus = isLuhnValid ? "‚úÖ V√°lido" : "‚ö†Ô∏è Inv√°lido";
        
        if (brand == CardBrandIdentifier.CardBrand.UNKNOWN) {
            return new ValidationResult(false, brand,
                "‚ùì Bandeira n√£o identificada para o n√∫mero: " + formattedNumber + 
                "\n   üìè Comprimento: " + sanitized.length() + " d√≠gitos" +
                "\n   üîç Algoritmo de Luhn: " + luhnStatus +
                "\n   ‚ÑπÔ∏è  O n√∫mero n√£o corresponde aos padr√µes conhecidos.", formattedNumber);
        }
        
        return new ValidationResult(true, brand,
            "‚úÖ Bandeira identificada: " + brand + 
            "\n   üí≥ N√∫mero: " + formattedNumber +
            "\n   üìè Comprimento: " + sanitized.length() + " d√≠gitos" +
            "\n   üîç Algoritmo de Luhn: " + luhnStatus, formattedNumber);
    }
    
    /**
     * Formata o n√∫mero do cart√£o para exibi√ß√£o, mascarando os d√≠gitos do meio.
     * 
     * @param cardNumber o n√∫mero do cart√£o sanitizado
     * @return o n√∫mero formatado com mascaramento de seguran√ßa
     */
    private String formatCardNumber(String cardNumber) {
        if (cardNumber.length() <= 8) {
            return cardNumber.substring(0, 4) + " **** " + cardNumber.substring(cardNumber.length() - 4);
        }
        return cardNumber.substring(0, 4) + " **** **** " + cardNumber.substring(cardNumber.length() - 4);
    }
}
